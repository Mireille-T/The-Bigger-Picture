// Add JavaScript for content that is already on the tab e.g. accessing existing page elements

const FILTERED_IMAGE_COUNT = 5;
const FILTERED_IMAGE_HEIGHT = 50;
const FILTERED_IMAGE_WIDTH = 50;

const imagesSrcSet = new Set();

var filteredImageCount = 0;

// Detects changes in DOM (for lazy-loading purposes)
var observer = new MutationObserver(function (mutations) {
  mutations.forEach(function (mutation) {
    if (mutation.type == "attributes" && mutation.attributeName == "role") {
      scanPageForImages();
    }
  });
});

var config = { attributes: true, childList: false, subtree: true };

chrome.runtime.sendMessage({ todo: "showPageAction" });

window.addEventListener("load", (event) => {
  // On page load, start tracking for DOM changes (in case of lazy-loading) and do an initial scan for images
  observer.observe(document.querySelector("html"), config);
  scanPageForImages();
});

async function scanPageForImages(limit = FILTERED_IMAGE_COUNT) {
  var allImages = document.querySelectorAll("img");

  for (var i = 0; i < allImages.length; i++) {
    if (filteredImageCount >= limit) {
      // if threshold has been hit, disconnect the observer to save resources
      observer?.disconnect();
      break;
    }

    const currentImageSrc = allImages[i].currentSrc;

    if (
      (allImages[i].alt == null ||
        allImages[i].alt.length == 0 ||
        allImages[i].alt == "Image") &&
      allImages[i].height > FILTERED_IMAGE_HEIGHT &&
      allImages[i].width > FILTERED_IMAGE_WIDTH &&
      !imagesSrcSet.has(currentImageSrc)
    ) {
      imagesSrcSet.add(currentImageSrc);
      image_caption = await getImageCaption(currentImageSrc);
      allImages[i].alt = image_caption;
      console.log(image_caption);
      console.log(allImages[i]);
      filteredImageCount++;
    }
  }
}

const getChromeSettings = () =>
  new Promise(function (resolve) {
    chrome.storage.sync.get("settings", function (result) {
      resolve(result);
    });
  });

async function getImageCaption(image_source) {
  const result = await getChromeSettings();
  const language = result?.settings?.language || "en";
  if (!language || !image_source) return;
  const AZURE_SERVICE_URL = `https://alto-api.azurewebsites.net/api/image-caption-service?image=${encodeURIComponent(
    image_source
  )}&language=${encodeURIComponent(language)}`;
  try {
    const response = await fetch(AZURE_SERVICE_URL);
    const description = await response.json();
    const image_caption = description?.result;
    const result = `Generated by alto: ${image_caption ?? "unavailable"}`;
    return result;
  } catch (e) {
    console.error(e);
  }
}

chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
  if (request.ping) {
    sendResponse({ pong: true });
    return;
  }
  scanPageForImages(1000);
  console.log("Alto: Generate for all images clicked");
});
